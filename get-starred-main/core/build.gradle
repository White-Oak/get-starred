apply plugin: "java"
apply plugin: 'propdeps'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/" ]
dependencies {        
    compile project(":get-starred-main:network")
    compile project(':get-starred-main:mobileframework')
    compile 'com.annimon:stream:1.0.3'
    provided 'org.projectlombok:lombok:1.16.6'
    compile 'com.google.code.gson:gson:2.3.1'
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile 'com.esotericsoftware:kryonet:2.22.0-RC1'
}

ext{
    buildNumberIncremented = false
    mBuildNumber = 96
    mVersion = "0.0.1"
}

task versionCodeUpdate() {
    def different = project.fileTree('src'){
	include '**/*.java'
	exclude '**/VersionCode.java'
    }
    inputs.files  different
    outputs.file  "./src/me/oak/getstarred/VersionCode.java"
    doLast{
	def file = project.file("./version.code")
	def fileVC = project.file("./src/me/oak/getstarred/VersionCode.java")
	if(file.exists()){
	    file.withReader('UTF-8'){fr ->
		project.ext.mBuildNumber = Integer.parseInt(fr.readLine())
		project.ext.mVersion = fr.readLine()
		if(!project.ext.buildNumberIncremented){
		    project.ext.mBuildNumber++
		    project.ext.buildNumberIncremented = true
		    println(":${project.name}:versionCodeUpdate - current build number is ${mBuildNumber}")
		}else{
		    println(":${project.name}:versionCodeUpdate - build number has already been incremented in this build -- check your build pipeline.")
		}
	    }
	}
	overwriteVersionCodeFile(mBuildNumber, mVersion, file)
	createVersionCodeJava(mBuildNumber, mVersion, fileVC)
	project.jar.baseName = 'get-starred-client'
	project.jar.version = "${mVersion}-b${mBuildNumber}"
    }
}
void createVersionCodeJava(int versionNum, String versionString, File file){
    if(file.exists()) file.delete()
    def versionCodeJava = """\n\
package spaceisnear;

public final class VersionCode {

    public static final int BUILD_NUMBER = ${versionNum};
    public static final String VERSION = "${versionString}";

    public static String getCode() {
	return VERSION + "-b" + BUILD_NUMBER;
    }
}
"""
    file.text = versionCodeJava
}
void overwriteVersionCodeFile(int num, String version, File file){
    if(file.exists()){
	file.delete()
    }
    file.text = "${num}\n${version}"
}

compileJava.dependsOn versionCodeUpdate