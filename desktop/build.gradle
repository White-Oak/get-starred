apply plugin: "java"

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

allprojects {
    repositories {
        mavenCentral()
	maven {
	    url  "http://dl.bintray.com/white-oak/maven" 
	}
    }
}
ext {
    buildNumberIncremented = false
    mBuildNumber = 31
    mVersion = '0.0.1'
    mainClass = "me.oak.getstarred.server.chat.Main"
}

sourceSets {
    main {
	java {
	    srcDirs = [ "src/" ]
	}
    }
}

dependencies {       
    compile 'me.whiteoak.minlog:oak-minlog:1.0.4'
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.esotericsoftware:kryonet:2.22.0-RC1'
}

task versionCodeUpdate {
    def different = fileTree('src'){
	include '**/*.java'
	exclude '**/VersionCode.java'
    }
    inputs.files  different
    outputs.file  "./src/me/oak/getstarred/server/chat/VersionCode.java"
    doLast{
	def file = file("./version.code")
	if(file.exists()){
	    file.withReader('UTF-8'){fr ->
		project.ext.mBuildNumber = Integer.parseInt(fr.readLine())
		project.ext.mVersion = fr.readLine()
		if(!project.ext.buildNumberIncremented){
		    project.ext.mBuildNumber++
		    project.ext.buildNumberIncremented = true
		    println(":${project.name}:versionCodeUpdate - current build number is ${mBuildNumber}")
		}else{
		    println(":${project.name}:versionCodeUpdate - build number has already been incremented in this build -- check your build pipeline.")
		}
	    }
	}
	overwriteVersionCodeFile(mBuildNumber, mVersion)
	createVersionCodeJava(mBuildNumber, mVersion)
	jar.baseName = 'get-starred-server'
	jar.version = "${mVersion}-b${mBuildNumber}"
    }
}

void createVersionCodeJava(int versionNum, String versionString){
    def file = file("./src/me/oak/getstarred/server/chat/VersionCode.java")
    if(file.exists()) file.delete()
    def versionCodeJava = """\n\
package me.oak.getstarred.server;

public final class VersionCode {

    public static final int BUILD_NUMBER = ${versionNum};
    public static final String VERSION = "${versionString}";

    public static String getCode() {
	return VERSION + "-b" + BUILD_NUMBER;
    }
}
"""
    file.text = versionCodeJava
}
void overwriteVersionCodeFile(int num, String version){
    def file = file("./version.code")
    if(file.exists()){
	file.delete()
    }
    file.text = "${num}\n${version}"
}

compileJava.dependsOn versionCodeUpdate